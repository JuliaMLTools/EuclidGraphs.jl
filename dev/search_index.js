var documenterSearchIndex = {"docs":
[{"location":"#EuclidGraphs.jl","page":"EuclidGraphs.jl","title":"EuclidGraphs.jl","text":"","category":"section"},{"location":"","page":"EuclidGraphs.jl","title":"EuclidGraphs.jl","text":"CurrentModule = EuclidGraphs","category":"page"},{"location":"#Simple,-lightweight,-beautiful-graph-rendering-in-VSCode-and-SVG","page":"EuclidGraphs.jl","title":"Simple, lightweight, beautiful graph rendering in VSCode and SVG","text":"","category":"section"},{"location":"","page":"EuclidGraphs.jl","title":"EuclidGraphs.jl","text":"Render a graph in directly in VSCode (or to an SVG file) using node and edge features as input. Designed to quickly visualize input and output features for graph neural networks (such as GraphNets.jl).","category":"page"},{"location":"#Example-1:-Basic-graph","page":"EuclidGraphs.jl","title":"Example 1: Basic graph","text":"","category":"section"},{"location":"","page":"EuclidGraphs.jl","title":"EuclidGraphs.jl","text":"using EuclidGraphs\nnodes = [(0,-10),(0,70),(75,21),(49,-70),(-49,-70),(-75,21)]\ng1 = EuclidGraph(nodes, adj_mat=rand(0:1, 6, 6))\ng1() # Renders in VSCode\nwrite(\"basic.svg\", g1())","category":"page"},{"location":"","page":"EuclidGraphs.jl","title":"EuclidGraphs.jl","text":"<img src=\"./assets/basic.svg\"/>","category":"page"},{"location":"#Example-2:-Styled-graph","page":"EuclidGraphs.jl","title":"Example 2: Styled graph","text":"","category":"section"},{"location":"","page":"EuclidGraphs.jl","title":"EuclidGraphs.jl","text":"g2 = EuclidGraph(\n    [(0,-10),(0,70),(75,21),(49,-70),(-49,-70),(-75,21)], \n    adj_mat=rand(0:1, 6, 6),\n    node_style=(node) -> NodeStyle(\n        inner_fill=(isone(node.features[node.idx]) ? \"green\" : \"#ccc\"),\n        font_color=\"white\",\n        stroke=(iseven(node.idx) ? \"blue\" : \"#333\"),\n        value=(node) -> nothing,\n    ),\n    edge_style=(edge) -> EdgeStyle(\n        directed_stroke=edge.features[edge.idx],\n        arrow_color=edge.features[edge.idx],\n        undirected_stroke=\"#ccc\",\n    ),\n)\nnum_edges = length(filter(isone, g2.adj_mat))\nnum_nodes = size(g2.adj_mat, 1)\nnode_features = zeros(Int, num_nodes)\nnode_features[rand(1:num_nodes)] = 1\nedge_features = rand([\"red\", \"#273E5B\", \"#273E5B\", \"#9493F2\"], num_edges)\ng2(node_features, edge_features) # Renders in VSCode\nwrite(\"styled.svg\", g2(node_features, edge_features))","category":"page"},{"location":"","page":"EuclidGraphs.jl","title":"EuclidGraphs.jl","text":"<img src=\"./assets/styled.svg\"/>","category":"page"},{"location":"#Example-3:-The-EuclidGraphs.jl-logo","page":"EuclidGraphs.jl","title":"Example 3: The EuclidGraphs.jl logo","text":"","category":"section"},{"location":"","page":"EuclidGraphs.jl","title":"EuclidGraphs.jl","text":"using EuclidGraphs\nlogo = EuclidGraph(\n    [(-50,0),(0,75),(0,25),(0,-25),(0,-75),(50, 25),(50,-25)], \n    node_style=(node) -> NodeStyle(\n        inner_fill=node.features[node.idx],\n        value=nothing,\n    ),\n    edge_style=(edge) -> EdgeStyle(stroke=\"#ccc\"),\n    fully_connected=false,\n)\naddbiedges!(logo, [(1,3),(1,2),(1,5),(1,4),(2,6),(5,7),(4,6),(3,7)])\nnode_features = [\"#4162D9\",\"#389825\",\"#9558B2\",\"#9558B2\",\"#389825\",\"#CB3C33\",\"#CB3C33\"]\nwrite(\"logo.svg\", logo(node_features))","category":"page"},{"location":"","page":"EuclidGraphs.jl","title":"EuclidGraphs.jl","text":"<img src=\"./assets/logo.svg\"/>","category":"page"},{"location":"#API-index","page":"EuclidGraphs.jl","title":"API index","text":"","category":"section"},{"location":"","page":"EuclidGraphs.jl","title":"EuclidGraphs.jl","text":"","category":"page"},{"location":"#Components","page":"EuclidGraphs.jl","title":"Components","text":"","category":"section"},{"location":"","page":"EuclidGraphs.jl","title":"EuclidGraphs.jl","text":"","category":"page"}]
}
